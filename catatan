
Oleh : Jaka Maulana Ibrhaim 


|==============+++++++++++++++++++++==================|
| 888888ba             dP   dP                        | 
| 88    `8b            88   88                        | 
|a88aaaa8P' dP    dP d8888P 88d888b. .d8888b. 88d888b.| 
| 88        88    88   88   88'  `88 88'  `88 88'  `88| 
| 88        88.  .88   88   88    88 88.  .88 88    88| 
| dP        `8888P88   dP   dP    dP `88888P' dP    dP| 
|                .88                                  | 
|            d8888P                                   | 
|=====================================================|
|                  - Fundamental -                    |
|=====================================================|


-Perbedaan Compiled Vs Interpreted Langguage- 

Compiled : Language > Machine Code > Ready to Run
Langguager = C , C++ , Fotran , Pascal
Keterangan : Ketika kita membuat kodingannya maka akan langsung di komplile ke machine code, dari machine code ini kita langsung bisa menjalankan aplikasinya.
Kelebihan : Erornya akan Terlihat Saat sedang di kompile nanti kompile nya tidak akan berjalan.

Interpreted : Language > Ready To Run > Virtual Machine > Machine Code 
Langguage : Python , PHP , Ruby , JavaScript
Keterangan : Tidak perlu di kompile , ketika kita sudah membuat kodingannya langsung bisa di jalankan ketika sudah dijalankan baru akan di terjemahkan di cirtual machine lalu di kompile di machine code 
Kelebihan : Erornya akan Terlihat saat di Runtime atau di jalankan.

Mengapa Kita Belajar Python : 
- Bahasa Pemprogaman Python Yang mudah dan sangat dekat dengan bahasa manusia 
- Bahasa Pemprograma Terbanyak di gunakan Untuk machine learning atau AI dan data sains
- Bahasa Pemprograman yang Flexsible dapat di gunakan untuk apasajah 
- Terdapat banyak Package Dalam bahasa pemprograman python 


- Variable Dan data Type -

Variable bisa di artikan sebuah Box atau Keranjang yang dapat kita isi dengan berbagaimacam barang didalamnya.

1. Sebuah variable akan menggunakan memory untuk menyimpan suatu nilai.
2. Kita dapat membuat sebuah variable dengan menggunakan tanda sama dengan(=)

contoh :

|=========================================|
|1  nama ="Jaka"                          |
|2  print("Nama saya adalah " + nama)     |
|=========================================|


dalam Python terdapat banyak tipe data:

No.| Nama           | Type |           Deskripsi                           |
1  | Intergers      | int  | Bilangan Bulat seperti:3,300,200              | 
2  | Floating Point | float| nomor dengan titik desimal: 2.3, 4.6          |
3  | String 	    | str  | urutan karakter :["hallo" 'summy' "2000"]     |
4  | Lists          | list | urutan Objek: [10,"hello",200.3]              | 
5  | Dictionaries   | dict | kunci tidak berurutan: pasangan nilai:        |
-  | ------------   | ---- | {"mykey" :"value","name":"Frankie"}           |
6  | tuples         | tup  | urutan objek yang tidak dapat diubah          |
-  | ------         | --   | (10,"hello",200.3)                            | 
7  | Sets           | set  | Koleksi objek unik yang tidak berurutan       |
-  | ----           | ---  | {"a","b"}                                     |
8  | Booleans       | bool | nilai logis yang menunjukkan "True" or "false"|



Type data Casting

- Casting adalah ketika kita mengubah suatu tipe data ke tipe data lainya.
- Casting dapat dilakukan dengan menggunakan function seperti int(), Float() ,atau str(). 

|====================================|
|1  angka_int = 5                    |
|2  angka_str = str(angka_int)       |
|3  angka_float = float(angka_int)   |
|4  print(type(angka_int))           |
|5  print(type(angka_str))           |
|6  print(type(angka_float))         |
|====================================|
|<class 'int'>   |
|<class 'str'>   |
|<class 'float'> |
|================|


Input dan output

- Untuk mengabil input dari user, kita menggunakan input()
- untuk memberikan output, kita menggunakan print()

|============================================|
|1  nama = input("nama Lengkap: ")           |
|2  print("selamat datang, " + nama + "!")   | 
|============================================|
|Nama lengkap: Elvan    | 
|Selamat datang, Elvan! |
|=======================|


-Operator, Operand, and Arithmatic-

Arithmetic Oprators

No | Operator | Description     |
1  |    +     | Addition        |
2  |    -     | Subtraction     |
3  |    *     | Multiplication  |
4  |    /     | Floating Point  |
   |          | division        |
5  |   //     | Integer divison |
6  |    %     | Integer modulus | 
7  |   **     | Exponentiation  | 

|=====================================================================================|
|1  nilaiA = 9                                                                        |
|2  nilaiB = 3                                                                        |
|3                                                                                    | 
|4  addition = nilaiA + nilaiB                                                        |
|5  #contoh aritmatika addition                                                       |
|6                                                                                    |
|7  subtraction = nilaiA - nilaiB                                                     |
|8  #contoh aritmatika subtraction                                                    |
|9                                                                                    |
|10  multiplication = nilaiA * nilaiB                                                 |
|11  #contoh aritmatika multiplication                                                |
|12                                                                                   |
|13  floatingPointdivision = nilaiA / nilaiB                                          |
|14  #contoh aritmatika floating point division                                       |
|15                                                                                   |
|16  integerdivision = nilaiA // nilaiB                                               |   
|17  #contoh aritmatika interger division                                             |
|18                                                                                   |
|19  integermodulus = nilaiA % nilaiB                                                 |
|20  #contoh aritmatika interger modulus                                              |
|21                                                                                   |
|22  Exponentiation = nilaiA ** nilaiB                                                |
|23  #contoh aritmatika exponentiation                                                |
|24                                                                                   |
|25  oprator = input("masukan oprator (+, -, *, /, //, %, //): ")                     |
|26                                                                                   |
|27  print(nilaiA, oprator, nilaiB, " = ", eval(str(nilaiA) + oprator + str(nilaiB))) |
|=====================================================================================|


-Assignment Operator

No | Operator  | Example   | Explanation  |
1  |   =       | x=5       | x = 5        |
2  |   +=      | x+=5      | x = x + 5    |
3  |   -=      | x-=5      | x = x - 5    | 
4  |   *=      | x*=5      | x = x * 5    |
5  |   /=      | x/=5      | x = x / 5    |
6  |   %=      | x%=5      | x = x % 5    |
7  |   //=     | x//=5     | x = x // 5   |


=========================================================
|1  nilaiA = 7                                          | 
|2  nilaiB = 7                                          |
|3  #contoh penggunaan Assignment Oprator               |
|4                                                      |
|5  nilaiA = nilaiA + 9                                 |
|6  print("tidak memakai assignment:" + str(nilaiA))    |
|7  #contoh tampa assignment Oprator                    |
|8                                                      |
|9  nilaiB += 9                                         |
|20  print("dengan memakai assignment:" + str(nilaiB))  | 
=========================================================
|tidak memakai assignment:16   |
|dengan memakai assignment:16  |
|==============================|


Math

- python memiliki built-in module untuk operasi matematika.
- math module memiliki banyak methods dan constants yang siap untuk digunakan.

module adalah sebuah toolbox atau library yang sudah siap digunakan

|============================|
|1  import math              |
|2                           |
|3  # using methods          | 
|4  print(math.pow(2, 3))    |
|5  print(math.ceil(3.2))    |
|6  print(math.sqrt(25))     |
|7                           |
|8  # Using constants        |
|9  print(math.pi)           |
|============================|
|8.0               |          
|4                 |
|5.0               |
|3.141592653589793 |
|==================|

String

- String dapat dideklarasi dengan menggunkan tanda petik satu(')  atau tanda petik dua(").
- Contoh: 'Python' dan "python"

|=======================================|
|1  NIM = "123456789"                   |
|2  Nama = 'Jaka'                       |
|3  print(Nama + " memiliki NIM " + NIM |
|=======================================|
|Jaka memiliki NIM 123456789 |
|============================|

Escape Character 

- Escape character dapat dibuat dengan tanda \
- Fungsinya adalah untuk menyisipkan karakter ilegal dalam sebuah string.

|=================================================|
|1  print("\"Selamat datang di Coding Studio!\""  |
|=================================================|
|"Selamat datang di coding Studio!"  |
|====================================|

String methods

Dalam mengolah string, kita seringkali menggunakan beberapa methods yang sudan terdapat di Python

|============================|  
|1  text = "coding studio"   |
|2                           |
|3  print(text.upper())      | 
|4  print(text.lower())      |
|5  print(len(text))         |
|6  print(text.split(' '))   |
|7  print(text.capitalize()) |
|8  print(text.index('s'))   |
|============================|

Slicing Strings

Slicing berfungsi untuk mengembalikan karakter yang berada dalam rentang index yang diberikan.

| P| Y| T| H| O| N|
| 0| 1| 2| 3| 4| 5|
|-6|-5|-4|-3|-2|-1|

|=======================|=========|
|1  print(text[0])      |P        |
|2  print(text[2:])     |thon     |
|3  print(text[:4])     |pyth     |
|4  print(text[3:5])    |ho       |
|5  print(text[:])      |Python   |
|6  print(text[-2])     |o        |
|7  print(text[-4:-1])  |tho      |
|=======================|=========|

String Concatenation

Untuk menggabungkan dua buah string, kita dapat menggunakan syntax +

|========================================|
|1  x = "Coding"                         |
|2  y = "Studio"                         |
|3                                       |
|4                                       |
|5  print(x + y)                         |
|6  print(x + " " + y)                   |
|7  print(x + " " + y + " " + str(100))  |
|========================================|
|CodingStudio       |
|Coding Studio      |
|Coding Studio 100  |
|===================|

String Format 

- Kita tahu bahwa kita tidak bisa langsung mengggabungkan string dan angka
- Selain menggunakan casting, kita juga dapat menggunakan format()

|==========================================|
|1  print("Bakal terjadi error " + 1)      |
|2  print("Tidak terjadi error " + str(1)) |
|==========================================|
|1 nama = "Cecep"                 |
|2 umur = 20                      |
|3 text = "{} brumur {} tahun."   |
|4                                |
|5 print(text.format(nama, umur)) |
|=================================|
|Cecep berumur 20 tahun. |
|========================|

In Vs. Not In

- Kita dapat memeriksa apakah sebuah substring terdapat dalam sebuah string

|========================================|
|1  text = "Coding Studio                |
|2  print("Studio" in text) # True       |
|3  print("Code" in text) # false        |
|========================================|

Tipe data Boolean adalah sebuah tipe data yang memiliki logical value, logical value terdiri dari true or false


 -Comparison Operators

No | Operator  | Description   | Example  |
1  |   >       | Greater Than  | 9 > 5    |
2  |   <       | Less Than     | 12 < 13  |
3  |   >=      | Greater than  |  8 >= 8  |
   |           | or equal to   |          | 
4  |   <=      | Less than or  | 5 < = 7  |
               | equal to      |          |
5  |   ==      | Equal         | 16 == 16 |
6  |   !=      | Not Equal     | 5! = 2   |


 -Logical Operator

No | Operator  | Description        | Example              |
1  |   and     | Both expression    | 10 > = 10 and 4 != 5 |
   |           | are true           |                      |
2  |    or     | One of the         | 3 == 5 or 7 > 5      |
   |           | Expression is true |                      |
3  |   not     | Reverse the result | not (5 > 8)          |
   |           | return False if the|                      | 
   |           | result is True     |                      |


LOOP STATEMENTS
 - For loop digunakan untuk menjalankan sebuah operasi berulang-ulang selama suatu kondisi terpenuhi.

 - Ketika sedang merebus mie, kita akan mulai meniriskan mie ketika sudah matang. selama (while) mie belum matang, rebus mie.

  Ga pake Forloop                                       menggunkan Forloop     
|========================================|    |==================================|
|1  print("Looping!")                    |    |1. for i in range(3):             |
|2  print("Looping!")                    |    |2.    print("Looping!")           |
|3  print("Looping!")                    |    |==================================|
|========================================|

syntak forloop Range 

 - Range memiliki parameter sebagai berikut : start, Stop, dan step.

 - Secara default, range memiliki default parameter sebagai berikut range(start = 0, stop, step = 1)

BREAK AND CONTINUE

    - Dengan break statement, kita dapat menghentikan sebuah loop walaupun loopnya masih berjalan.

|========================================|
|1 for i in range(10, 20, 3):            |====|
|2     if i == 19:                       | 10 |
|3         break                         | 13 |
|4                                       | 16 |
|5                                       |====|
|6 print(i)                              |
|========================================|
 
   - Dengan continue statement, kita dapat melewati oprasi yang kita lakukan dan langsung lanjut ke iterasi berikutnya.

|========================================|
|1 for i in range(10, 20, 3):            |====|
|2     if i == 13:                       | 10 |
|3        continue                       | 13 |
|4                                       | 19 |
|5                                       |====|
|6 print(i)                              |
|========================================|


While Statement 
 - While statement akan mengesekusi operasi di dalamnya selama kondisinya bernilai true 

|===========================================|
|1 nilai = 50                               |=====================|
|2                                          | nilai sekarang : 50 |
|3 while(nilai < 70):                       | nilai sekarang : 55 |
|4   print("nilai sekarang: "+ str(nilai))  | nilai sekarang : 60 |
|5   nilai += 5                             | nilai sekarang : 65 |
|6                                          |=====================|
|===========================================|


PYTHON COLLECTION DATA TYPE

List 
 - list adalah sebuah koleksi yang terurut dan dapat diganti.
 - list bisa menampung elemen yang diduplikat.


|====================================================|
|1 listExample = ['python, 42, 3.9, true, 42         |==============================|
|2                                                   | Python                       |
|3 print(listExample[0])                             | [42, 3.0, true]              |
|4 print(listExample[1:4])                           | 42                           |
|5 print(listExmaple[-1])                            | ['python', 42, 3.9, True, 42 |
|6 print(listExample)                                |==============================|
|====================================================|

 List Operation
 - Create data (append, insert)
 - Read Data
 - Update
 - Delete Data (remove, pop, del, clear)

Tuple
 - berbeda dengan list, element di dalam tuple tidak bisa diubah.

|================================|
|1 tupleExample = (2, 3)         |
|2 tupleExample[0] = 4           |
|===========================================================|
|typeError: 'tuple' object does not support item assignment |
|===========================================================|

- Dictionary
 dictionary digunakan untuk menyimpan data dalam bentuk key:value.

|====================|
|1 customer = {      |
|2 "id": 100,        |
|3 "nama": "Budi",   |
|4 "umur": 23        |
|5 }                 |
|====================|

Function 

- Function memungkinkan kumpulan code untuk digunakan kembali di suatu program. 
- python menyediakan beberapa built-in function seperti len(), print(), dan type().

FUNCTION SYNTAX 

Function name : nama dari functionnya.

Argument : nilai yang diberikan ke function

function body : isi dari sebuah function

retrun value : hasil yang dikembalikan oleh function

Create and call 

di python kita menggunakan def() untuk membuat sebuah fungsi 


|===============================|
|1 def greet():                 |
|2  print("hello, stranger!")   |
|3                              |
|4 greet()                      |
|===============================|
|Hello, stranger!  |
|==================|


Passing Argument 

|===============================|
|1 def greet(name):             |
|2  print("hello," + name)      |
|3                              |
|4 greet("Budi")                |
|5 greet("Ahmad")               |
|6 greet("Cecep")               |
|===============================|
|Hello, Budi       |
|Hello, Ahmad      |
|Hello, Cecep      |
|==================|


Lamda Function


|===============================|
|1 def add5(x):                 |
|2   return x+5                 |
|3                              |
|4                              |
|5 print(add5(2))               |
|===============================|
|1 add5 = lambda x: x+2         |
|2 print(add5(2))               |
|===============================|


























